
# Create a new directory and enter it
function md() {
	mkdir -p "$@" && cd "$@"
}

function pmv(){
	mkdir -p $1 && mv *-$1.* $1
}
# find shorthand
function f() {
    find . -name "$1"
}

#MongoDB functions to start and stop the server 
function mongod(){
	cd /usr/local/mongodb/bin/ && ./mongod  
}
function mongo(){
	cd /usr/local/mongodb/bin/ && ./mongo
}

#Backup a file with the current date 
function bkf(){
  local thisdate=`date +%Y%m%d-%H%M`
  local bakfile="$thisdate-$1"
  echo "baking up to $1 file"
  cp "$1" "$bakfile"
  echo "done"
}

#Log Live Git Command
#https://gist.github.com/tlberglund/3714970
function gitTree(){
while :
  do
  clear
  tree .git
  sleep 1
done
}

#Log Live Git Command 1
function loglive(){
while :
  do
      clear
      git --no-pager log --graph --pretty=oneline --abbrev-commit --decorate --all $*
      sleep 1
  done
}
#Log Live Git Command 2
function logliveb(){
  while :
  do
    clear
    git --no-pager log -$1 --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    sleep 1
  done
}

# cd into whatever is the forefront Finder window.
cdf() {  # short for cdfinder
    cd "`osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)'`"
 }

# lets toss an image onto my server and pbcopy that bitch.
function scpp() {
    scp "$1" aurgasm@aurgasm.us:~/paulirish.com/i;
    echo "http://paulirish.com/i/$1" | pbcopy;
    echo "Copied to clipboard: http://paulirish.com/i/$1"
}

# ssh to local sandBox servers
function blade(){
	ssh crac@10.0.1.8
}

function spi(){
	ssh pi@10.0.1.9 
}

function megatron(){
	ssh verik@10.0.1.10
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	#sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
	
}
function ssk(){
	local port="${1:-8000}"
	#sleep 1 && open "http://localhost:${port}/" &
	python ~/server/mserver.py ${port}
}

function runPlex(){
	sudo ./Volumes/Storage/ATV3/PlexConnect/PlexConnect.py
}

# git log with per-commit cmd-clickable GitHub URLs (iTerm)
function gf() {
  local remote="$(git remote -v | awk '/^origin.*\(push\)$/ {print $2}')"
  [[ "$remote" ]] || return
  local user_repo="$(echo "$remote" | perl -pe 's/.*://;s/\.git$//')"
  git log $* --name-status --color | awk "$(cat <<AWK
    /^.*commit [0-9a-f]{40}/ {sha=substr(\$2,1,7)}
    /^[MA]\t/ {printf "%s\thttps://github.com/$user_repo/blob/%s/%s\n", \$1, sha, \$2; next}
    /.*/ {print \$0}
AWK
  )" | less -F
}

# take this repo and copy it to somewhere else minus the .git stuff.
function gitexport(){
   mkdir -p "$1"
   git archive master | tar -x -C "$1"
}

# Copy w/ progress
cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}

# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
	encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# Syntax-highlight JSON strings or files
function json() {
	if [ -p /dev/stdin ]; then
		# piping, e.g. `echo '{"foo":42}' | json`
		python -mjson.tool | pygmentize -l javascript
	else
		# e.g. `json '{"foo":42}'`
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	fi
}

# get gzipped size
function gz() {
	echo "orig size    (bytes): "
	cat "$1" | wc -c
	echo "gzipped size (bytes): "
	gzip -c "$1" | wc -c
}

# All the dig info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
	echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
	echo # newline
}

# Extract archives - use: extract <file>
# Based on http://dotfiles.org/~pseup/.bashrc
function extract() {
	if [ -f "$1" ] ; then
		local filename=$(basename "$1")
		local foldername="${filename%%.*}"
		local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
		local didfolderexist=false
		if [ -d "$foldername" ]; then
			didfolderexist=true
			read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
			echo
			if [[ $REPLY =~ ^[Nn]$ ]]; then
				return
			fi
		fi
		mkdir -p "$foldername" && cd "$foldername"
		case $1 in
			*.tar.bz2) tar xjf "$fullpath" ;;
			*.tar.gz) tar xzf "$fullpath" ;;
			*.tar.xz) tar Jxvf "$fullpath" ;;
			*.tar.Z) tar xzf "$fullpath" ;;
			*.tar) tar xf "$fullpath" ;;
			*.taz) tar xzf "$fullpath" ;;
			*.tb2) tar xjf "$fullpath" ;;
			*.tbz) tar xjf "$fullpath" ;;
			*.tbz2) tar xjf "$fullpath" ;;
			*.tgz) tar xzf "$fullpath" ;;
			*.txz) tar Jxvf "$fullpath" ;;
			*.zip) unzip "$fullpath" ;;
			*) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

#non test ramdom git changes
function generateramdomchanges(){
  #Ensure we have the quantity specified on the CLI
  if [ -z "$3" ]; then ARG_ERR=ERR; fi
  if [ -z "$2" ]; then ARG_ERR=ERR; fi
  if [ -z "$1" ]; then ARG_ERR=ERR; fi
  if [ -n "$ARG_ERR" ];
  then
    echo "Usage: <filecount> <filenamebase> <filenameextension>"
        exit
        fi 
        count=$1
         filenamebase=$2
         filenameextension=$3
         for (( filenumber = 1; filenumber <= $count ; filenumber++ )); do
             echo "Some new random text: $RANDOM" → $filenamebase$filenumber.$filenameextension
                git add $filenamebase$filenumber.$filenameextension
                git commit -m"A random change of $RANDOM to $filenamebase$filenumber.$filenameextension"
           done
}

# animated gifs from any video
# from alex sexton   gist.github.com/SlexAxton/4989674
function gifify() {
  if [[ -n "$1" ]]; then
    if [[ $2 == '--good' ]]; then
      ffmpeg -i $1 -r 10 -vcodec png out-static-%05d.png
      time convert -verbose +dither -layers Optimize -resize 600x600\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > $1.gif
      rm out-static*.png
    else
      ffmpeg -i $1 -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > $1.gif
    fi
  else
    echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
  fi
}

function activiti(){
 ssh -L 8181:c-activiti01vm.corporate.nsirad.com:8181 neurostar@c-bravovm.corporate.nsirad.com
}

function NOKQ(){
	export EVENT_NOKQUEUE=1
}

function match_filename() {
  find "$1" -iname "*$2*" -print
}
function match_contents() {
  grep -Ri "$1" -e "$2"
}
function matchrun_filename() {
  find "$1" -iname "*$2*" -print0 | xargs -0 ls -l
}
function matchrun_contents() {
  grep -Ri "$1" -e "$2" -lZ | xargs -0 "${@:3}"
}
